plugins {
    id "fabric-loom" version "1.8.1"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "2.0.21"
}

archivesBaseName = project.archives_base_name + "-" + project.minecraft_version
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
}

repositories {
    mavenCentral()
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/cao-awa/Catheter"
        credentials {
            username = "cao-awa"
            password = "ghp_UgALm1Ta2ONYeNh" + "S2m0XoWSc27BcE22v4Umn"
        }
    }
    maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/cao-awa/Sinuatum"
        credentials {
            username = "cao-awa"
            password = "ghp_UgALm1Ta2ONYeNh" + "S2m0XoWSc27BcE22v4Umn"
        }
    }
    maven {
        name = "GitHubPackages"
        url = "https://github.com/cao-awa/language-translator"
        credentials {
            username = "cao-awa"
            password = "ghp_UgALm1Ta2ONYeNh" + "S2m0XoWSc27BcE22v4Umn"
        }
    }
}

configurations {
    create("shadow")
    implementation.extendsFrom(shadow)
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    shadow "org.jetbrains.kotlin:kotlin-stdlib:${project.kotlin_version}"

    shadow "org.jetbrains.kotlin:kotlin-scripting-common:${project.kotlin_version}"
    shadow "org.jetbrains.kotlin:kotlin-scripting-jvm:${project.kotlin_version}"
    shadow "org.jetbrains.kotlin:kotlin-scripting-jvm-host:${project.kotlin_version}"
    shadow "org.jetbrains.kotlin:kotlin-scripting-dependencies:${project.kotlin_version}"
    shadow "org.jetbrains.kotlin:kotlin-scripting-dependencies-maven:${project.kotlin_version}"
    // coroutines dependency is required for this particular definition
    shadow "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.9.0"
    shadow "org.jetbrains.kotlin:kotlin-script-util:1.8.22"
    shadow "org.jetbrains.kotlin:kotlin-scripting-jsr223:${project.kotlin_version}"

    // Uncomment the following line to enable the deprecated Fabric API modules.
    // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

    shadow 'com.google.guava:guava:32.1.3-jre'

    shadow 'org.reflections:reflections:0.10.2'

    shadow 'com.github.cao.awa:catheter:1.0.41'
    shadow 'com.github.cao.awa:sinuatum:1.0.11'
    shadow 'com.github.cao.awa:language-translator:1.0.6'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}" }
    }

    with copySpec({
        from(configurations.shadow.collect {
            it.isDirectory() ? it : zipTree(it)
        })

        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    })
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

loom {
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"

            runDir "build/datagen"
        }
    }
}

// Add the datagenned files into the jar.
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '21'
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '21'
    }
}
