plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${project.kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${project.kotlin_version}"

    shadowBundle "org.jetbrains.kotlin:kotlin-scripting-jvm:${project.kotlin_version}"
    shadowBundle "org.jetbrains.kotlin:kotlin-scripting-jvm-host:${project.kotlin_version}"

    shadowBundle 'com.alibaba.fastjson2:fastjson2:2.0.50'

    shadowBundle 'com.github.cao.awa:catheter:1.0.42'
    shadowBundle 'com.github.cao.awa:sinuatum:1.0.15'

    shadowBundle "com.github.cao.awa:structuring-translator:${project.structuring_translator_version}"

    // Fabric Kotlin
    modImplementation "net.fabricmc:fabric-language-kotlin:${rootProject.fabric_kotlin_version}"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

repositories {
    mavenCentral()
}

kotlin {
    jvmToolchain(21)
}
