plugins {
    id 'org.jetbrains.kotlin.jvm'
}

architectury {
    common rootProject.enabled_platforms.split(',')
}

dependencies {
    // We depend on Fabric Loader here to use the Fabric @Environment annotations,
    // which get remapped to the correct annotations on each platform.
    // Do NOT use other classes from Fabric Loader.
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury:$rootProject.architectury_api_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${project.kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:2.1.0"

    implementation "org.jetbrains.kotlin:kotlin-scripting-common:${project.kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:${project.kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm-host:${project.kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-scripting-dependencies:${project.kotlin_version}"

    implementation 'com.alibaba.fastjson2:fastjson2:2.0.50'

    implementation 'com.github.cao.awa:catheter:1.0.42'
    implementation 'com.github.cao.awa:sinuatum:1.0.15'

    implementation "com.github.cao.awa:structuring-translator:${project.structuring_translator_version}"

    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.property("fabric_loader_version")}"
}

repositories {
    mavenCentral()
}

loom {
    accessWidenerPath = file("src/main/resources/conium.accesswidener")
}

kotlin {
    jvmToolchain(21)
}
